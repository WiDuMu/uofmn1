[4mpodman-exec[24m(1)                                                              General Commands Manual                                                             [4mpodman-exec[24m(1)

[1mNAME[0m
       podman-exec - Execute a command in a running container

[1mSYNOPSIS[0m
       [1mpodman exec [22m[[4moptions[24m] [4mcontainer[24m [[4mcommand[24m [[4marg[24m ...]]

       [1mpodman container exec [22m[[4moptions[24m] [4mcontainer[24m [[4mcommand[24m [[4marg[24m ...]]

[1mDESCRIPTION[0m
       [1mpodman exec [22mexecutes a command in a running container.

[1mOPTIONS[0m
   [1m--detach, -d[0m
       Start  the  exec session, but do not attach to it. The command runs in the background, and the exec session is automatically removed when it completes. The [1mpodman exec[0m
       command prints the ID of the exec session and exits immediately after it starts.

   [1m--detach-keys=[4msequence[0m
       Specify the key sequence for detaching a container. Format is a single character [1m[a-Z] [22mor one or more [1mctrl-<value> [22mcharacters where [1m<value> [22mis one of: [1ma-z[22m, [1m@[22m, [1m^[22m, [1m[[22m,  [1m,[0m
       or [1m_[22m. Specifying "" disables this feature. The default is [4mctrl-p,ctrl-q[24m.

       This option can also be set in [1mcontainers.conf[22m(5) file.

   [1m--env, -e=[4menv[0m
       Set environment variables.

       This  option  allows arbitrary environment variables that are available for the process to be launched inside of the container. If an environment variable is specified
       without a value, Podman checks the host environment for a value and set the variable only if it is set on the host. As a special case, if an environment variable  end‚Äê
       ing in [1m* [22mis specified without a value, Podman searches the host environment for variables starting with the prefix and adds those variables to the container.

   [1m--env-file=[4mfile[0m
       Read in a line-delimited file of environment variables.

   [1m--interactive, -i[0m
       When set to [1mtrue[22m, keep stdin open even if not attached. The default is [1mfalse[22m.

   [1m--latest, -l[0m
       Instead of providing the container name or ID, use the last created container.  Note: the last started container can be from other users of Podman on the host machine.
       (This option is not available with the remote Podman client, including Mac and Windows (excluding WSL2) machines)

   [1m--preserve-fd=[4mFD1[,FD2,...][0m
       Pass  down  to  the  process the additional file descriptors specified in the comma separated list.  It can be specified multiple times.  This option is only supported
       with the crun OCI runtime.  It might be a security risk to use this option with other OCI runtimes.

       (This option is not available with the remote Podman client, including Mac and Windows (excluding WSL2) machines)

   [1m--preserve-fds=[4mN[0m
       Pass down to the process N additional file descriptors (in addition to 0, 1, 2).  The total FDs are 3+N.  (This option is not available with the remote Podman  client,
       including Mac and Windows (excluding WSL2) machines)

   [1m--privileged[0m
       Give extended privileges to this container. The default is [1mfalse[22m.

       By  default,  Podman containers are unprivileged ([1m=false[22m) and cannot, for example, modify parts of the operating system. This is because by default a container is only
       allowed limited access to devices. A "privileged" container is given the same access to devices as the user launching the container, with the exception of virtual con‚Äê
       soles ([4m/dev/tty\d+[24m) when running in systemd mode ([1m--systemd=always[22m).

       A privileged container turns off the security features that isolate the container from the host. Dropped Capabilities, limited devices, read-only mount points,  Appar‚Äê
       mor/SELinux separation, and Seccomp filters are all disabled.  Due to the disabled security features, the privileged field should almost never be set as containers can
       easily break out of confinement.

       Containers running in a user namespace (e.g., rootless containers) cannot have more privileges than the user that launched them.

   [1m--tty, -t[0m
       Allocate a pseudo-TTY. The default is [1mfalse[22m.

       When set to [1mtrue[22m, Podman allocates a pseudo-tty and attach to the standard input of the container. This can be used, for example, to run a throwaway interactive shell.

       [1mNOTE[22m:  The  --tty flag prevents redirection of standard output.  It combines STDOUT and STDERR, it can insert control characters, and it can hang pipes. This option is
       only used when run interactively in a terminal. When feeding input to Podman, use -i only, not -it.

   [1m--user, -u=[4muser[:group][0m
       Sets the username or UID used and, optionally, the groupname or GID for the specified command. Both [4muser[24m and [4mgroup[24m may be symbolic or numeric.

       Without this argument, the command runs as the user specified in the container image. Unless overridden by a [1mUSER [22mcommand in the Containerfile or by a value passed  to
       this option, this user generally defaults to root.

       When  a user namespace is not in use, the UID and GID used within the container and on the host match. When user namespaces are in use, however, the UID and GID in the
       container may correspond to another UID and GID on the host. In rootless containers, for example, a user namespace is always used, and root in the container by default
       corresponds to the UID and GID of the user invoking Podman.

   [1m--workdir, -w=[4mdir[0m
       Working directory inside the container.

       The default working directory for running binaries within a container is the root directory ([1m/[22m).  The image developer can set a different default with the WORKDIR  in‚Äê
       struction. The operator can override the working directory by using the [1m-w [22moption.

[1mExit Status[0m
       The  exit  code  from  [1mpodman exec [22mgives information about why the command within the container failed to run or why it exited.  When [1mpodman exec [22mexits with a non-zero
       code, the exit codes follow the [1mchroot [22mstandard, see below:

       [1m125 [22mThe error is with Podman itself

       $ podman exec --foo ctrID /bin/sh; echo $?
       Error: unknown flag: --foo
       125

       [1m126 [22mThe [4mcontained[24m [4mcommand[24m cannot be invoked

       $ podman exec ctrID /etc; echo $?
       Error: container_linux.go:346: starting container process caused "exec: \"/etc\": permission denied": OCI runtime error
       126

       [1m127 [22mThe [4mcontained[24m [4mcommand[24m cannot be found

       $ podman exec ctrID foo; echo $?
       Error: container_linux.go:346: starting container process caused "exec: \"foo\": executable file not found in $PATH": OCI runtime error
       127

       [1mExit code [22mThe [4mcontained[24m [4mcommand[24m exit code

       $ podman exec ctrID /bin/sh -c 'exit 3'; echo $?
       3

[1mEXAMPLES[0m
       Execute command in selected container with a stdin and a tty allocated:

       $ podman exec -it ctrID ls

       Execute command with the overridden working directory in selected container with a stdin and a tty allocated:

       $ podman exec -it -w /tmp myCtr pwd

       Execute command as the specified user in selected container:

       $ podman exec --user root ctrID ls

[1mSEE ALSO[0m
       [1mpodman(1)[22m, [1mpodman-run(1)[0m

[1mHISTORY[0m
       December 2017, Originally compiled by Brent Baudebbaude@redhat.com ‚ü®mailto:bbaude@redhat.com‚ü©

                                                                                                                                                                [4mpodman-exec[24m(1)
